{"version":3,"file":"data-create-at.pipe.js","sourceRoot":"","sources":["../../../../../../../../shared/src/lib/utils/pipes/data-create-at.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { KeyTimeWorld, TimeWorld } from '../../data/interfaces/time-word.interface';\nimport { DatePipe } from '@angular/common';\n\n@Pipe({\n  name: 'dataCreateAt',\n  standalone: true\n})\nexport class DataCreateAtPipe implements PipeTransform {\n  timeWorld: TimeWorld = {\n    s: ['секунда', 'секунды', 'секунд'],\n    m: ['минута', 'минуты', 'минут'],\n    h: ['час', 'часа', 'часов'],\n    d: ['день', 'дня', 'дней']\n  };\n\n  endingsTimeWords(number: number, type: KeyTimeWorld): string {\n    let result = '';\n    switch (number >= 20 ? number % 10 : number) {\n      case 1:\n        result = this.timeWorld[type][0];\n        break;\n      case 2:\n      case 3:\n      case 4:\n        result = this.timeWorld[type][1];\n        break;\n      default:\n        result = this.timeWorld[type][2];\n    }\n    return result;\n  }\n\n  transform(date: string | null): string | null {\n    if (!date) return null;\n\n    const createAtDate = Date.parse(date);\n    const iso = new Date().getTimezoneOffset();\n    const createAtIsoDate = new Date(createAtDate + iso * 60 * -1000);\n    const nowDate = new Date();\n\n    // let hour: number = createAtIsoDate.getHours();\n    // let minutes: number = createAtIsoDate.getMinutes();\n    // let dayOfMonth: number = createAtIsoDate.getDate();\n    // let month: number = createAtIsoDate.getMonth();\n    // let year: number = createAtIsoDate.getFullYear();\n\n    let diffMs: number = nowDate.getTime() - createAtIsoDate.getTime();\n    let diffSec: number = Math.round(diffMs / 1000);\n    let diffMin: number = Math.round(diffSec / 60);\n    let diffHour: number = Math.round(diffMin / 60);\n    let diffDayOfMonth: number = Math.round(diffHour / 24);\n\n    if (diffSec < 1) {\n      return 'прямо сейчас';\n    } else if (diffMin < 1) {\n      return `${diffSec} ${this.endingsTimeWords(diffSec, 's')}  назад`;\n    } else if (diffHour < 1) {\n      return `${diffMin} ${this.endingsTimeWords(diffMin, 'm')}  назад `;\n    } else if (diffHour < 24) {\n      return `${diffHour} ${this.endingsTimeWords(diffHour, 'h')}  назад`;\n    } else if (diffDayOfMonth < 32) {\n      return `${diffDayOfMonth} ${this.endingsTimeWords(\n        diffDayOfMonth,\n        'd'\n      )} назад`;\n    } else {\n      const transformAtDate = Date.parse(`${createAtIsoDate}`);\n      const datePipe = new DatePipe('en-US');\n      return datePipe.transform(transformAtDate, 'dd.MM.YYYY hh:mm') || ''\n    }\n  }\n}\n"]}