{"version":3,"file":"avatar-upload.component.js","sourceRoot":"","sources":["../../../../../../../../profile/src/lib/ui/avatar-upload/avatar-upload.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC3E,OAAO,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAC7C,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAUnC,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IAChC,OAAO,GAAG,MAAM,CAAS,qCAAqC,CAAC,CAAC;IAEhE,MAAM,GAAgB,IAAI,CAAC;IAE3B,kBAAkB,CAAC,KAAY;QAC7B,MAAM,IAAI,GAAI,KAAK,CAAC,MAA2B,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QAE5D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,aAAa,CAAC,IAAU;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED,WAAW,CAAC,IAA6B;QACvC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAAE,OAAO;QAE/C,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAEhC,MAAM,CAAC,MAAM,GAAG,CAAC,KAAK,EAAE,EAAE;YACxB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC;QAEF,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACrB,CAAC;CACF,CAAA;AA3BY,qBAAqB;IARjC,SAAS,CAAC;QACT,QAAQ,EAAE,mBAAmB;QAC7B,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE,CAAC,gBAAgB,EAAE,YAAY,EAAE,WAAW,CAAC;QACtD,WAAW,EAAE,gCAAgC;QAC7C,QAAQ,EAAE,gCAAgC;QAC1C,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,qBAAqB,CA2BjC","sourcesContent":["import { ChangeDetectionStrategy, Component, signal } from '@angular/core';\r\nimport { SvgIconComponent } from '@tt/common-ui';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DndDirective } from '@tt/shared';\r\n\r\n@Component({\r\n  selector: 'app-avatar-upload',\r\n  standalone: true,\r\n  imports: [SvgIconComponent, DndDirective, FormsModule],\r\n  templateUrl: './avatar-upload.component.html',\r\n  styleUrl: './avatar-upload.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AvatarUploadComponent {\r\n  preview = signal<string>('/assets/imgs/avatar-placeholder.png');\r\n\r\n  avatar: File | null = null;\r\n\r\n  fileBrowserHandler(event: Event) {\r\n    const file = (event.target as HTMLInputElement)?.files?.[0];\r\n\r\n    this.processFile(file);\r\n  }\r\n\r\n  onFileDropped(file: File) {\r\n    this.processFile(file);\r\n  }\r\n\r\n  processFile(file: File | null | undefined) {\r\n    if (!file || !file.type.match('image')) return;\r\n\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = (event) => {\r\n      this.preview.set(event.target?.result?.toString() ?? '');\r\n    };\r\n\r\n    reader.readAsDataURL(file);\r\n    this.avatar = file;\r\n  }\r\n}\r\n"]}