{"version":3,"file":"mock.service.js","sourceRoot":"","sources":["../../../../../../../delivery-page/src/lib/services/mock.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAgBtC,MAAM,UAAU,GAAG;IACjB,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC,EAAE;IACzE,EAAE,MAAM,EAAE,iBAAiB,EAAE,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE;CACvF,CAAC;AAEF,MAAM,UAAU,GAAG;IACjB;QACE,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,gBAAgB;QACvB,KAAK,EAAE,KAAK;KACb;IACD;QACE,IAAI,EAAE,gBAAgB;QACtB,KAAK,EAAE,oBAAoB;QAC3B,KAAK,EAAE,IAAI;KACZ;IACD;QACE,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,qBAAqB;QAC5B,KAAK,EAAE,IAAI;KACZ;CACF,CAAC;AAMK,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,cAAc;QACZ,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;IACxB,CAAC;IAED,WAAW;QACT,OAAO,EAAE,CAAC,UAAU,CAAC,CAAC;IACxB,CAAC;CACF,CAAA;AARY,WAAW;IAHvB,UAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,WAAW,CAQvB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\n\nexport interface Address {\n  city?: string,\n  street?: string,\n  building?: number | null,\n  apartment?: number | null,\n}\n\nexport interface Feature {\n  code: string,\n  label: string,\n  value: boolean\n}\n\nconst MOCK_DATA1 = [\n  { 'city': 'Москва', 'street': 'Ленина', 'building': 115, 'apartment': 1 },\n  { 'city': 'Санкт-Петербург', 'street': 'Заставская', 'building': 15, 'apartment': 51 }\n];\n\nconst MOCK_DATA2 = [\n  {\n    code: 'lift',\n    label: 'Подъем на этаж',\n    value: false\n  },\n  {\n    code: 'strong-package',\n    label: 'Усиленная упаковка',\n    value: true\n  },\n  {\n    code: 'fast',\n    label: 'Ускоренная доставка',\n    value: true\n  }\n];\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockService {\n  getAddressData(): Observable<Address[]> {\n    return of(MOCK_DATA1);\n  }\n\n  getFeatures(): Observable<Feature[]> {\n    return of(MOCK_DATA2);\n  }\n}\n"]}