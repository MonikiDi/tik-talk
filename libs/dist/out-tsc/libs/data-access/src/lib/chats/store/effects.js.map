{"version":3,"file":"effects.js","sourceRoot":"","sources":["../../../../../../../../data-access/src/lib/chats/store/effects.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,GAAG,EAAE,SAAS,EAAO,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;AACzC,OAAO,EAAE,cAAc,EAAE,MAAM,wCAAwC,CAAC;AAExE,MAAM,OAAO,WAAW;IACtB,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IACV,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;IACpC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IAEzD,cAAc,GAAG,YAAY,CAAC,GAAG,EAAE;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,YAAY,CAAC,eAAe,CAAC,EACpC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,YAAY;iBACrB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;iBACxB,IAAI,CACH,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CACf,YAAY,CAAC,iBAAiB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CACpD,CACF,CAAC;QACN,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,kBAAkB,GAAG,YAAY,CAAC,GAAG,EAAE;QACrC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,EAC3C,SAAS,CAAC,GAAG,EAAE;YACb,OAAO,IAAI,CAAC,YAAY;iBACrB,SAAS,EAAE;iBACX,IAAI,CACH,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CACf,YAAY,CAAC,wBAAwB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAC3D,CACF,CAAC;QACN,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,mBAAmB,GAAG,YAAY,CAAC,GAAG,EAAE;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvB,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,EACjC,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YACjB,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CACxD,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACf,OAAO,YAAY,CAAC,kBAAkB,CAAC;oBACrC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;oBAC5C,OAAO,EAAE;wBACP,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACxB,QAAQ,EAAE,QAAQ;wBAClB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO;wBAClC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU;wBACvC,cAAc,EAAE,CAAC;qBAClB;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;CACJ","sourcesContent":["import { inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { map, switchMap, tap } from 'rxjs';\nimport { ChatsService } from '../services/chats.service';\nimport { chatsActions } from './actions';\nimport { ProfileService } from '../../profile/services/profile.service';\n\nexport class ChatEffects {\n  actions$ = inject(Actions);\n  private readonly chatsService = inject(ChatsService);\n  private readonly profileService = inject(ProfileService);\n\n  getMyChatById$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(chatsActions.loadGetChatById),\n      switchMap((data) => {\n        return this.chatsService\n          .getChatById(data.chatId)\n          .pipe(\n            map((response) =>\n              chatsActions.loadedGetChatById({ chats: response })\n            )\n          );\n      })\n    );\n  });\n\n  getlastMesageChat$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(chatsActions.loadLastMessageChatMap),\n      switchMap(() => {\n        return this.chatsService\n          .getMyChat()\n          .pipe(\n            map((response) =>\n              chatsActions.loadedLastMessageChatMap({ chats: response })\n            )\n          );\n      })\n    );\n  });\n  addLastMessageChat$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(chatsActions.getProfileId),\n      switchMap((data) => {\n        return this.profileService.getAccount(data.profileId).pipe(\n          map((response) => {\n            return chatsActions.addLastMessageChat({\n              chatId: data.message.data.chat_id.toString(),\n              message: {\n                id: data.message.data.id,\n                userFrom: response,\n                message: data.message.data.message,\n                createdAt: data.message.data.created_at,\n                unreadMessages: 1,\n              },\n            });\n          })\n        );\n      })\n    );\n  });\n}\n"]}