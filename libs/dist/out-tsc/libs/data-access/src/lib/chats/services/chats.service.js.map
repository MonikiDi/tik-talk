{"version":3,"file":"chats.service.js","sourceRoot":"","sources":["../../../../../../../../data-access/src/lib/chats/services/chats.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Chat, LastMessageRes } from '@tt/interfaces/chats/chats.interface';\nimport { of, startWith, Subject, switchMap } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { ChatWsService } from '@tt/interfaces/chats/chat-ws-service.interface';\nimport { ChatWSMessageReceive } from '@tt/interfaces/chats/chat-ws-message.interface';\nimport {\n  isErrorMessage,\n  isNewMessage,\n  isUnreadMessage,\n} from '@tt/interfaces/chats/type-guards';\nimport { ChatWsRxjsService } from './chat-ws-rxjs.service';\nimport { AuthService } from '../../auth/services/auth.service';\nimport {\n  getChatBuId,\n  getLastMessageId,\n  selectActiveChatId,\n} from '../store/selectors';\nimport { chatsActions } from '../store/actions';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ChatsService {\n  private readonly http = inject(HttpClient);\n  #authService = inject(AuthService);\n  private readonly store = inject(Store);\n  private readonly baseApiUrl = '/yt-course/';\n  private readonly chatsUrl = `${this.baseApiUrl}chat/`;\n\n  wsAdapter: ChatWsService = new ChatWsRxjsService();\n  private refresh$ = new Subject<void>();\n\n  connectWs() {\n    return this.refresh$.pipe(\n      startWith(true),\n      switchMap((data) => {\n        return data\n          ? of({\n              access_token: this.#authService.token || '',\n            })\n          : this.#authService.refreshAuthToken();\n      }),\n      switchMap(({ access_token }) => {\n        this.wsAdapter.disconnect();\n        return this.wsAdapter.connect({\n          url: `${this.baseApiUrl}chat/ws`,\n          token: access_token,\n          handleMessage: (message) => {\n            this.handleWSMessage(message);\n          },\n        });\n      })\n    );\n  }\n\n  public refreshConnectWs() {\n    this.refresh$.next();\n  }\n\n  public handleWSMessage(message: ChatWSMessageReceive) {\n    if (isErrorMessage(message)) {\n      this.refreshConnectWs();\n    }\n\n    if (isUnreadMessage(message)) {\n      this.store.dispatch(\n        chatsActions.setUnread({ unread: message.data.count })\n      );\n    }\n\n    if (isNewMessage(message)) {\n      const chat = this.store.selectSignal(\n        getChatBuId(message.data.chat_id.toString())\n      );\n      const lastMessageId = this.store.selectSignal(\n        getLastMessageId(message.data.chat_id.toString())\n      );\n      const activeChatId = this.store.selectSignal(selectActiveChatId);\n\n      if (chat()) {\n        this.store.dispatch(\n          chatsActions.addMessageChat({\n            chatId: message.data.chat_id.toString(),\n            message: {\n              id: message.data.id,\n              userFromId: message.data.author,\n              personalChatId: message.data.chat_id,\n              text: message.data.message,\n              createdAt: message.data.created_at,\n              isRead: false,\n            },\n          })\n        );\n      }\n      if (lastMessageId()) {\n        this.store.dispatch(\n          chatsActions.upsertLastMessageChat({\n            chatId: message.data.chat_id.toString(),\n            message: {\n              id: message.data.chat_id,\n              userFrom: lastMessageId().userFrom,\n              message: message.data.message,\n              createdAt: message.data.created_at,\n              unreadMessages:\n                activeChatId() === message.data.chat_id.toString()\n                  ? lastMessageId().unreadMessages\n                  : lastMessageId().unreadMessages + 1,\n            },\n          })\n        );\n      } else {\n        this.store.dispatch(\n          chatsActions.getProfileId({\n            profileId: message.data.author.toString(),\n            message: message,\n          })\n        );\n      }\n    }\n  }\n\n  createChat(userId: number) {\n    return this.http.post<Chat>(`${this.chatsUrl}${userId}`, {});\n  }\n\n  getMyChat() {\n    return this.http.get<LastMessageRes[]>(`${this.chatsUrl}get_my_chats/`);\n  }\n\n  getChatById(chatId: number) {\n    return this.http.get<Chat>(`${this.chatsUrl}${chatId}`);\n  }\n}\n"]}