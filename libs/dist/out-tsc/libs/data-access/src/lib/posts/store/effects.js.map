{"version":3,"file":"effects.js","sourceRoot":"","sources":["../../../../../../../../data-access/src/lib/posts/store/effects.ts"],"names":[],"mappings":"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","sourcesContent":["import { inject } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { postsActions } from './actions';\r\nimport { map, switchMap } from 'rxjs';\r\nimport { PostService } from '../services/post.service';\r\n\r\nexport class PostEffects {\r\n  actions$ = inject(Actions);\r\n  private readonly postService = inject(PostService);\r\n\r\n  // getPosts$ = createEffect(() => {\r\n  //   return this.actions$.pipe(\r\n  //     ofType(postsActions.loadPosts),\r\n  //     switchMap(() => {\r\n  //       return this.postService\r\n  //         .fetchPosts()\r\n  //         .pipe(\r\n  //           map((response) => postsActions.loadedPosts({ posts: response }))\r\n  //         );\r\n  //     })\r\n  //   );\r\n  // });\r\n  addPost$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(postsActions.createPost),\r\n      switchMap((data) => {\r\n        return this.postService\r\n          .createPost(data)\r\n          .pipe(map((post) => postsActions.createdPost(post)));\r\n      })\r\n    );\r\n  });\r\n  deletePostId$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(postsActions.deletePost),\r\n      switchMap((data) => {\r\n        return this.postService\r\n          .deletePost(data.postId)\r\n          .pipe(map(() => postsActions.deletedPost({ postId: data.postId })));\r\n      })\r\n    );\r\n  });\r\n  getPostsUserId$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(postsActions.loadPostsUserId),\r\n      switchMap((data) => {\r\n        return this.postService\r\n          .getPostsUserId(data.userId)\r\n          .pipe(\r\n            map((response) =>\r\n              postsActions.loadedPostsUserId({ userPosts: response })\r\n            )\r\n          );\r\n      })\r\n    );\r\n  });\r\n  addCommentPost$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(postsActions.createComment),\r\n      switchMap((data) => {\r\n        return this.postService\r\n          .createComment(data)\r\n          .pipe(map((response) => postsActions.createdComment(response)));\r\n      })\r\n    );\r\n  });\r\n  deleteCommentId$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(postsActions.deleteComment),\r\n      switchMap((data) => {\r\n        return this.postService.deleteComment(data.commentId).pipe(\r\n          map(() =>\r\n            postsActions.deletedComment({\r\n              postId: data.postId,\r\n              commentId: data.commentId,\r\n            })\r\n          )\r\n        );\r\n      })\r\n    );\r\n  });\r\n  editPost$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(postsActions.editPost),\r\n      switchMap((data) => {\r\n        return this.postService\r\n          .updatePost(data.postId, data.postEdit)\r\n          .pipe(map((post) => postsActions.editedPost(post)));\r\n      })\r\n    );\r\n  });\r\n}\r\n"]}