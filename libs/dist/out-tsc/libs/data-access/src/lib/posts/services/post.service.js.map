{"version":3,"file":"post.service.js","sourceRoot":"","sources":["../../../../../../../../data-access/src/lib/posts/services/post.service.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAQ9D,OAAO,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AAKpB,IAAM,WAAW,GAAjB,MAAM,WAAW;IACL,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IAC1B,UAAU,GAAG,aAAa,CAAC;IAE5C,eAAe;IACf,UAAU,CAAC,OAAsB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAO,GAAG,IAAI,CAAC,UAAU,OAAO,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAED,gBAAgB;IAChB,UAAU,CAAC,MAAc,EAAE,OAAiB;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAO,GAAG,IAAI,CAAC,UAAU,QAAQ,MAAM,EAAE,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED,iBAAiB;IACjB,UAAU;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,GAAG,IAAI,CAAC,UAAU,OAAO,CAAC,CAAC;IAC1D,CAAC;IAED,eAAe;IACf,UAAU,CAAC,MAAc;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAO,GAAG,IAAI,CAAC,UAAU,QAAQ,MAAM,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,sBAAsB;IACtB,aAAa,CAAC,OAAyB;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAc,GAAG,IAAI,CAAC,UAAU,UAAU,EAAE,OAAO,CAAC,CAAC;IAC5E,CAAC;IAED,sBAAsB;IACtB,aAAa,CAAC,MAAc;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAO,GAAG,IAAI,CAAC,UAAU,WAAW,MAAM,EAAE,CAAC,CAAC;IACvE,CAAC;IAED,iBAAiB;IACjB,OAAO,CAAC,MAAc;QACpB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CACnB,GAAG,IAAI,CAAC,UAAU,aAAa,MAAM,EAAE,EACvC,EAAE,CACH,CAAC;IACJ,CAAC;IAED,eAAe;IACf,UAAU,CAAC,MAAc;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CACrB,GAAG,IAAI,CAAC,UAAU,aAAa,MAAM,EAAE,CACxC,CAAC;IACJ,CAAC;IAED,wBAAwB;IACxB,cAAc,CAAC,UAAkB;QAC/B,IAAI,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAC9B,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAS,GAAG,IAAI,CAAC,UAAU,OAAO,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAC9E,CAAC;IAED,yCAAyC;IACzC,gBAAgB,CAAC,MAAc;QAC7B,OAAO,IAAI,CAAC,IAAI;aACb,GAAG,CAAO,GAAG,IAAI,CAAC,UAAU,QAAQ,MAAM,EAAE,CAAC;aAC7C,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,qBAAqB;IACrB,QAAQ,CAAC,QAAkB;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAW,GAAG,IAAI,CAAC,UAAU,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxE,CAAC;CACF,CAAA;AAnEY,WAAW;IAHvB,UAAU,CAAC;QACV,UAAU,EAAE,MAAM;KACnB,CAAC;GACW,WAAW,CAmEvB","sourcesContent":["import { inject, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport {\r\n  CommentCreateDto,\r\n  Post,\r\n  PostComment,\r\n  PostCreateDto,\r\n  PostEdit,\r\n} from '@tt/interfaces/post/post.interface';\r\nimport { map } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PostService {\r\n  private readonly http = inject(HttpClient);\r\n  private readonly baseApiUrl = '/yt-course/';\r\n\r\n  // Создать пост\r\n  createPost(payload: PostCreateDto) {\r\n    return this.http.post<Post>(`${this.baseApiUrl}post/`, payload);\r\n  }\r\n\r\n  // Обновить пост\r\n  updatePost(postId: number, payload: PostEdit) {\r\n    return this.http.patch<Post>(`${this.baseApiUrl}post/${postId}`, payload);\r\n  }\r\n\r\n  // Получить посты\r\n  fetchPosts() {\r\n    return this.http.get<Post[]>(`${this.baseApiUrl}post/`);\r\n  }\r\n\r\n  // Удалить пост\r\n  deletePost(postId: number) {\r\n    return this.http.delete<void>(`${this.baseApiUrl}post/${postId}`);\r\n  }\r\n\r\n  // Создать комментарий\r\n  createComment(payload: CommentCreateDto) {\r\n    return this.http.post<PostComment>(`${this.baseApiUrl}comment/`, payload);\r\n  }\r\n\r\n  // Удалить комментарий\r\n  deleteComment(postId: number) {\r\n    return this.http.delete<void>(`${this.baseApiUrl}comment/${postId}`);\r\n  }\r\n\r\n  // Поставить лайк\r\n  addLike(postId: number) {\r\n    return this.http.post<{ message: string }>(\r\n      `${this.baseApiUrl}post/like/${postId}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  // Удалить лайк\r\n  deleteLike(postId: number) {\r\n    return this.http.delete<{ message: string }>(\r\n      `${this.baseApiUrl}post/like/${postId}`\r\n    );\r\n  }\r\n\r\n  // Получить посты UserId\r\n  getPostsUserId(queryParam: number) {\r\n    let params = new HttpParams();\r\n    params = params.append('user_id', queryParam);\r\n    return this.http.get<Post[]>(`${this.baseApiUrl}post/`, { params: params });\r\n  }\r\n\r\n  //  Искуственное получение пост-комментов\r\n  getCommentPostId(postId: number) {\r\n    return this.http\r\n      .get<Post>(`${this.baseApiUrl}post/${postId}`)\r\n      .pipe(map((res) => res.comments));\r\n  }\r\n\r\n  // Редактировать пост\r\n  editPost(editPost: PostEdit) {\r\n    return this.http.patch<PostEdit>(`${this.baseApiUrl}post/`, editPost);\r\n  }\r\n}\r\n"]}