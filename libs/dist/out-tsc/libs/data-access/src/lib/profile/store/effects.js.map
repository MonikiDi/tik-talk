{"version":3,"file":"effects.js","sourceRoot":"","sources":["../../../../../../../../data-access/src/lib/profile/store/effects.ts"],"names":[],"mappings":"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","sourcesContent":["import { effect, inject, Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  profileActions,\n  selectFilteredProfiles,\n  selectPaginationProfiles\n} from './index';\nimport { catchError, EMPTY, exhaustMap, map, switchMap, tap } from 'rxjs';\nimport { ProfileService } from '../services/profile.service';\nimport { Store } from '@ngrx/store';\nimport { concatLatestFrom } from '@ngrx/operators';\n\nexport class ProfileEffects {\n  profileService = inject(ProfileService);\n  actions$ = inject(Actions);\n\n  private readonly store = inject(Store);\n\n  loadProfileMe = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadGetMe),\n      switchMap(() => {\n        return this.profileService\n          .getMe()\n          .pipe(map((data) => profileActions.loadedGetMe({ profileMe: data })));\n      })\n    );\n  });\n  loadPatchMe = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadPatchMe),\n      switchMap((updateMe) => {\n        return this.profileService\n          .patchProfile(updateMe)\n          .pipe(map((data) => profileActions.loadedPatchMe(data)));\n      })\n    );\n  });\n\n  loadPatchAvatarMe = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadPatchAvatarMe),\n      switchMap((updateAvatar) => {\n        return this.profileService\n          .uploadAvatar(updateAvatar.file)\n          .pipe(map((data) => profileActions.loadedPatchAvatarMe(data)));\n      })\n    );\n  });\n\n  loadUserId = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadUserId),\n      switchMap(({ userId }) => {\n        return this.profileService\n          .getAccount(userId)\n          .pipe(map((data) => profileActions.loadedUser({ user: data })));\n      })\n    );\n  });\n\n  loadingStartProfiles = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadProfiles),\n      map(() => profileActions.loadingStartProfiles())\n    );\n  });\n\n  loadingEndInfiniteProfiles = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadedInfiniteProfiles),\n      map(() => profileActions.loadingEndProfiles())\n    );\n  });\n  loadingEndPaginationProfiles = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadedPaginationProfiles),\n      map(() => profileActions.loadingEndProfiles())\n    );\n  });\n\n  loadProfile = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.loadProfiles),\n      exhaustMap(({ filters, pagination }) => {\n        let isScroll = pagination.isScroll;\n        return this.profileService\n          .query(filters, {\n            page: pagination.currentPage,\n            perPage: pagination.perPage || 10\n          })\n          .pipe(\n            map((response) => isScroll ? profileActions.loadedInfiniteProfiles(response): profileActions.loadedPaginationProfiles(response)),\n            catchError(() => EMPTY)\n          );\n      })\n    );\n  });\n\n  filterProfiles = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.filterEvents),\n      concatLatestFrom(() => this.store.select(selectPaginationProfiles)),\n      map(([filters, pagination]) => {\n        return profileActions.loadProfiles({\n          filters,\n          pagination: {\n            ...pagination,\n            currentPage: 1\n          }\n        });\n      })\n    );\n  });\n\n  paginationProfiles = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(profileActions.paginationProfiles),\n      concatLatestFrom(() => this.store.select(selectFilteredProfiles)),\n      map(([pagination, filters]) => {\n        return profileActions.loadProfiles({ filters, pagination });\n      })\n    );\n  });\n}\n"]}