{"version":3,"file":"auth.interceptor.js","sourceRoot":"","sources":["../../../../../../../../data-access/src/lib/auth/interceptors/auth.interceptor.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACvC,OAAO,EACL,eAAe,EACf,UAAU,EACV,MAAM,EACN,SAAS,EACT,GAAG,EACH,UAAU,GACX,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,WAAW,EAAE,MAAM,0BAA0B,CAAC;AAEvD,IAAI,aAAa,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,oBAAoB,GAAsB,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;IACnE,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;IACxC,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;IAEhC,IAAI,CAAC,KAAK;QAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;IAE7B,IAAI,aAAa,CAAC,KAAK,EAAE;QACvB,OAAO,cAAc,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;KAC/C;IAED,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CACpC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;QACnB,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;YACxB,OAAO,cAAc,CAAC,WAAW,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SAC/C;QAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CACrB,WAAwB,EACxB,GAAqB,EACrB,IAAmB,EACnB,EAAE;IACF,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;QACxB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,OAAO,WAAW,CAAC,gBAAgB,EAAE,CAAC,IAAI,CACxC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAC/C,GAAG,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CACrC,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;KACH;IAED,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC7B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,KAAM,CAAC,CAAC,CAAC;IAEjD,OAAO,aAAa,CAAC,IAAI,CACvB,MAAM,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,YAAY,CAAC,EACvC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,WAAW,CAAC,KAAM,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,CAAC,GAAqB,EAAE,KAAa,EAAE,EAAE;IACxD,OAAO,GAAG,CAAC,KAAK,CAAC;QACf,UAAU,EAAE;YACV,aAAa,EAAE,UAAU,KAAK,EAAE;SACjC;KACF,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import {\n  HttpHandlerFn,\n  HttpInterceptorFn,\n  HttpRequest,\n} from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport {\n  BehaviorSubject,\n  catchError,\n  filter,\n  switchMap,\n  tap,\n  throwError,\n} from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\nlet isRefreshing$ = new BehaviorSubject<boolean>(false);\n\nexport const authTokenInterceptor: HttpInterceptorFn = (req, next) => {\n  const authService = inject(AuthService);\n  const token = authService.token;\n\n  if (!token) return next(req);\n\n  if (isRefreshing$.value) {\n    return refreshProceed(authService, req, next);\n  }\n\n  return next(addToken(req, token)).pipe(\n    catchError((error) => {\n      if (error.status === 403) {\n        return refreshProceed(authService, req, next);\n      }\n\n      return throwError(error);\n    })\n  );\n};\n\nconst refreshProceed = (\n  authService: AuthService,\n  req: HttpRequest<any>,\n  next: HttpHandlerFn\n) => {\n  if (!isRefreshing$.value) {\n    isRefreshing$.next(true);\n    return authService.refreshAuthToken().pipe(\n      switchMap((res) => {\n        return next(addToken(req, res.access_token)).pipe(\n          tap(() => isRefreshing$.next(false))\n        );\n      })\n    );\n  }\n\n  if (req.url.includes('refresh'))\n    return next(addToken(req, authService.token!));\n\n  return isRefreshing$.pipe(\n    filter((isRefreshing) => !isRefreshing),\n    switchMap((res) => {\n      return next(addToken(req, authService.token!));\n    })\n  );\n};\n\nconst addToken = (req: HttpRequest<any>, token: string) => {\n  return req.clone({\n    setHeaders: {\n      Authorization: `Bearer ${token}`,\n    },\n  });\n};\n"]}