{"version":3,"file":"chat-workspace.component.js","sourceRoot":"","sources":["../../../../../../../../chats/src/lib/feature-chats-workspace/chat-workspace/chat-workspace.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  computed,\n  inject,\n  OnInit,\n  Signal,\n} from '@angular/core';\nimport { ChatWorkspaceHeaderComponent } from './chat-workspace-header/chat-workspace-header.component';\nimport { ChatWorkspaceMessagesWrapperComponent } from './chat-workspace-messages-wrapper/chat-workspace-messages-wrapper.component';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { filter, map, of, switchMap } from 'rxjs';\nimport {\n  chatsActions,\n  ChatsService,\n  hasLastMessageById,\n  selectActiveChat,\n  selectProfileMe,\n} from '@tt/data-access';\nimport { Store } from '@ngrx/store';\nimport { Profile } from '@tt/interfaces/profile';\n\n@Component({\n  selector: 'app-chat-workspace',\n  standalone: true,\n  imports: [\n    ChatWorkspaceHeaderComponent,\n    ChatWorkspaceMessagesWrapperComponent,\n  ],\n  templateUrl: './chat-workspace.component.html',\n  styleUrl: './chat-workspace.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ChatWorkspaceComponent implements OnInit {\n  private readonly chatsService = inject(ChatsService);\n  private readonly route = inject(ActivatedRoute);\n  private readonly store = inject(Store);\n  private readonly router = inject(Router);\n\n  public readonly me: Signal<Profile | undefined> =\n    this.store.selectSignal(selectProfileMe);\n  public readonly activeChat = this.store.selectSignal(selectActiveChat);\n\n  public readonly companion = computed(() => {\n    const activeChat = this.activeChat();\n    if (!activeChat) return undefined;\n    return activeChat.userFirst.id === this.me()?.id\n      ? activeChat.userSecond\n      : activeChat.userFirst;\n  });\n\n  private readonly chatId$ = this.route.params.pipe(map(({ id }) => id));\n\n  ngOnInit() {\n    this.chatId$\n      .pipe(\n        switchMap((id) => {\n          if (id === 'new') {\n            return this.route.queryParams.pipe(\n              filter(({ userId }) => userId),\n              switchMap(({ userId }) => {\n                return this.chatsService.createChat(userId).pipe(\n                  switchMap((chat) => {\n                    return of({ id: chat.id, isRedirect: true });\n                  })\n                );\n              })\n            );\n          }\n          return of({ id, isRedirect: false });\n        })\n      )\n      .subscribe(({ id, isRedirect }) => {\n        if (isRedirect) {\n          this.router.navigate(['chats', id]);\n          return;\n        }\n        this.store.dispatch(chatsActions.setActiveChatId({ chatId: id }));\n        if (this.store.selectSignal(hasLastMessageById(id))()) {\n          this.store.dispatch(\n            chatsActions.upsertLastMessageChat({\n              chatId: id,\n              message: {\n                unreadMessages: 0,\n              },\n            })\n          );\n        }\n        this.store.dispatch(chatsActions.loadGetChatById({ chatId: id }));\n      });\n  }\n}\n"]}