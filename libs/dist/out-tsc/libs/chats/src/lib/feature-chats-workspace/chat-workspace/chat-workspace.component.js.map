{"version":3,"file":"chat-workspace.component.js","sourceRoot":"","sources":["../../../../../../../../chats/src/lib/feature-chats-workspace/chat-workspace/chat-workspace.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  computed,\r\n  inject,\r\n  OnInit,\r\n  Signal,\r\n} from '@angular/core';\r\nimport { ChatWorkspaceHeaderComponent } from './chat-workspace-header/chat-workspace-header.component';\r\nimport { ChatWorkspaceMessagesWrapperComponent } from './chat-workspace-messages-wrapper/chat-workspace-messages-wrapper.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { filter, map, of, switchMap } from 'rxjs';\r\nimport {\r\n  chatsActions,\r\n  ChatsService,\r\n  hasLastMessageById,\r\n  selectActiveChat,\r\n  selectProfileMe,\r\n} from '@tt/data-access';\r\nimport { Store } from '@ngrx/store';\r\nimport { Profile } from '@tt/interfaces/profile';\r\n\r\n@Component({\r\n  selector: 'app-chat-workspace',\r\n  standalone: true,\r\n  imports: [\r\n    ChatWorkspaceHeaderComponent,\r\n    ChatWorkspaceMessagesWrapperComponent,\r\n  ],\r\n  templateUrl: './chat-workspace.component.html',\r\n  styleUrl: './chat-workspace.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChatWorkspaceComponent implements OnInit {\r\n  private readonly chatsService = inject(ChatsService);\r\n  private readonly route = inject(ActivatedRoute);\r\n  private readonly store = inject(Store);\r\n  private readonly router = inject(Router);\r\n\r\n  public readonly me: Signal<Profile | undefined> =\r\n    this.store.selectSignal(selectProfileMe);\r\n  public readonly activeChat = this.store.selectSignal(selectActiveChat);\r\n\r\n  public readonly companion = computed(() => {\r\n    const activeChat = this.activeChat();\r\n    if (!activeChat) return undefined;\r\n    return activeChat.userFirst.id === this.me()?.id\r\n      ? activeChat.userSecond\r\n      : activeChat.userFirst;\r\n  });\r\n\r\n  private readonly chatId$ = this.route.params.pipe(map(({ id }) => id));\r\n\r\n  ngOnInit() {\r\n    this.chatId$\r\n      .pipe(\r\n        switchMap((id) => {\r\n          if (id === 'new') {\r\n            return this.route.queryParams.pipe(\r\n              filter(({ userId }) => userId),\r\n              switchMap(({ userId }) => {\r\n                return this.chatsService.createChat(userId).pipe(\r\n                  switchMap((chat) => {\r\n                    return of({ id: chat.id, isRedirect: true });\r\n                  })\r\n                );\r\n              })\r\n            );\r\n          }\r\n          return of({ id, isRedirect: false });\r\n        })\r\n      )\r\n      .subscribe(({ id, isRedirect }) => {\r\n        if (isRedirect) {\r\n          this.router.navigate(['chats', id]);\r\n          return;\r\n        }\r\n        this.store.dispatch(chatsActions.setActiveChatId({ chatId: id }));\r\n        if (this.store.selectSignal(hasLastMessageById(id))()) {\r\n          this.store.dispatch(\r\n            chatsActions.upsertLastMessageChat({\r\n              chatId: id,\r\n              message: {\r\n                unreadMessages: 0,\r\n              },\r\n            })\r\n          );\r\n        }\r\n        this.store.dispatch(chatsActions.loadGetChatById({ chatId: id }));\r\n      });\r\n  }\r\n}\r\n"]}